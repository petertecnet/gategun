{"ast":null,"code":"import { vModelCheckbox as _vModelCheckbox, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, withDirectives as _withDirectives, renderSlot as _renderSlot, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = [\"id\", \"disabled\"];\nconst _hoisted_2 = [\"for\"];\nconst _hoisted_3 = {\n  key: 0\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: _normalizeClass([\"custom-control custom-checkbox\", [{\n      disabled: $props.disabled\n    }, {\n      [`custom-checkbox-${$props.type}`]: $props.type\n    }, $options.inlineClass]])\n  }, [_withDirectives(_createElementVNode(\"input\", {\n    id: $data.cbId,\n    class: _normalizeClass([\"custom-control-input\", $props.inputClasses]),\n    type: \"checkbox\",\n    disabled: $props.disabled,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $options.model = $event)\n  }, null, 10 /* CLASS, PROPS */, _hoisted_1), [[_vModelCheckbox, $options.model]]), _createElementVNode(\"label\", {\n    for: $data.cbId,\n    class: \"custom-control-label\"\n  }, [_renderSlot(_ctx.$slots, \"default\", {}, () => [$props.inline ? (_openBlock(), _createElementBlock(\"span\", _hoisted_3, \"Â \")) : _createCommentVNode(\"v-if\", true)])], 8 /* PROPS */, _hoisted_2)], 2 /* CLASS */);\n}","map":{"version":3,"names":["_createElementBlock","class","_normalizeClass","$props","disabled","type","$options","inlineClass","_createElementVNode","id","$data","cbId","inputClasses","model","$event","for","_renderSlot","_ctx","$slots","inline","_hoisted_3"],"sources":["C:\\xampp\\htdocs\\gategun\\frontend\\src\\components\\Inputs\\BaseCheckbox.vue"],"sourcesContent":["<template>\n  <div class=\"custom-control custom-checkbox\"\n       :class=\"[\n       {disabled: disabled},\n       {[`custom-checkbox-${type}`]: type},inlineClass]\">\n    <input :id=\"cbId\"\n           class=\"custom-control-input\"\n           :class=\"inputClasses\"\n           type=\"checkbox\"\n           :disabled=\"disabled\"\n           v-model=\"model\"/>\n    <label :for=\"cbId\" class=\"custom-control-label\">\n      <slot>\n        <span v-if=\"inline\">&nbsp;</span>\n      </slot>\n    </label>\n  </div>\n</template>\n<script>\n  export default {\n    name: \"base-checkbox\",\n    model: {\n      prop: \"checked\"\n    },\n    props: {\n      checked: {\n        type: [Array, Boolean],\n        description: \"Whether checkbox is checked\"\n      },\n      disabled: {\n        type: Boolean,\n        description: \"Whether checkbox is disabled\"\n      },\n      inline: {\n        type: Boolean,\n        description: \"Whether checkbox is inline\"\n      },\n      inputClasses: {\n        type: [String, Object, Array],\n        description: \"Checkbox input classes\"\n      },\n      type: {\n        type: String,\n        description: 'Checkbox type (e.g info, danger etc)'\n      }\n    },\n    data() {\n      return {\n        cbId: \"\",\n        touched: false\n      };\n    },\n    computed: {\n      model: {\n        get() {\n          return this.checked;\n        },\n        set(check) {\n          if (!this.touched) {\n            this.touched = true;\n          }\n          this.$emit(\"input\", check);\n        }\n      },\n      inlineClass() {\n        if (this.inline) {\n          return `form-check-inline`;\n        }\n      }\n    },\n    created() {\n      this.cbId = Math.random()\n        .toString(16)\n        .slice(2);\n    }\n  };\n</script>\n"],"mappings":";;;;;;;uBACEA,mBAAA,CAeM;IAfDC,KAAK,EAAAC,eAAA,EAAC,gCAAgC,G;gBACVC,MAAA,CAAAC;IAAQ,G;0BAA+BD,MAAA,CAAAE,IAAI,KAAKF,MAAA,CAAAE;IAAI,GAAEC,QAAA,CAAAC,WAAW;sBAGhGC,mBAAA,CAKwB;IALhBC,EAAE,EAAEC,KAAA,CAAAC,IAAI;IACTV,KAAK,EAAAC,eAAA,EAAC,sBAAsB,EACpBC,MAAA,CAAAS,YAAY;IACpBP,IAAI,EAAC,UAAU;IACdD,QAAQ,EAAED,MAAA,CAAAC,QAAQ;+DACVE,QAAA,CAAAO,KAAK,GAAAC,MAAA;kEAALR,QAAA,CAAAO,KAAK,E,GACrBL,mBAAA,CAIQ;IAJAO,GAAG,EAAEL,KAAA,CAAAC,IAAI;IAAEV,KAAK,EAAC;MACvBe,WAAA,CAEOC,IAAA,CAAAC,MAAA,iBAFP,MAEO,CADOf,MAAA,CAAAgB,MAAM,I,cAAlBnB,mBAAA,CAAiC,QAAAoB,UAAA,EAAb,GAAM,K"},"metadata":{},"sourceType":"module","externalDependencies":[]}