{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = [\"disabled\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: \"slider\",\n    disabled: $props.disabled\n  }, null, 8 /* PROPS */, _hoisted_1);\n}","map":{"version":3,"names":["_createElementBlock","class","disabled","$props"],"sources":["C:\\xampp\\htdocs\\gategun\\frontend\\src\\components\\BaseSlider.vue"],"sourcesContent":["<template>\n  <div class=\"slider\" :disabled=\"disabled\"></div>\n</template>\n<script>\nimport noUiSlider from 'nouislider';\n\nexport default {\n  name: 'base-slider',\n  props: {\n    value: {\n      type: [String, Array, Number],\n      description: 'slider value'\n    },\n    disabled: {\n      type: Boolean,\n      default: false,\n      description: 'whether the slider is disabled'\n    },\n    start: {\n      type: [Number, Array],\n      default: 0,\n      description:\n        '[noUi Slider start](https://refreshless.com/nouislider/slider-options/#section-start)'\n    },\n    connect: {\n      type: [Boolean, Array],\n      default: () => [true, false],\n      description:\n        '[noUi Slider connect](https://refreshless.com/nouislider/slider-options/#section-connect)'\n    },\n    range: {\n      type: Object,\n      default: () => {\n        return {\n          min: 0,\n          max: 100\n        };\n      },\n      description:\n        '[noUi Slider range](https://refreshless.com/nouislider/slider-values/#section-range)'\n    },\n    options: {\n      type: Object,\n      default: () => {\n        return {};\n      },\n      description:\n        '[noUi Slider options](https://refreshless.com/nouislider/slider-options/)'\n    }\n  },\n  data() {\n    return {\n      slider: null\n    };\n  },\n  methods: {\n    createSlider() {\n      noUiSlider.create(this.$el, {\n        start: this.value || this.start,\n        connect: Array.isArray(this.value) ? true : this.connect,\n        range: this.range,\n        ...this.options\n      });\n      const slider = this.$el.noUiSlider;\n      slider.on('slide', () => {\n        let value = slider.get();\n        if (value !== this.value) {\n          this.$emit('input', value);\n        }\n      });\n    }\n  },\n  mounted() {\n    this.createSlider();\n  },\n  watch: {\n    value(newValue, oldValue) {\n      const slider = this.$el.noUiSlider;\n      const sliderValue = slider.get();\n      if (newValue !== oldValue && sliderValue !== newValue) {\n        if (Array.isArray(sliderValue) && Array.isArray(newValue)) {\n          if (\n            oldValue.length === newValue.length &&\n            oldValue.every((v, i) => v === newValue[i])\n          ) {\n            slider.set(newValue);\n          }\n        } else {\n          slider.set(newValue);\n        }\n      }\n    }\n  }\n};\n</script>\n<style></style>\n"],"mappings":";;;uBACEA,mBAAA,CAA+C;IAA1CC,KAAK,EAAC,QAAQ;IAAEC,QAAQ,EAAEC,MAAA,CAAAD"},"metadata":{},"sourceType":"module","externalDependencies":[]}